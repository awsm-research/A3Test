CommandLine { public String getOptionValue(char opt) { return getOptionValue(String.valueOf(opt)); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public String[] getArgs() { String[] answer = new String[args.size()]; args.toArray(answer); return answer; } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public Iterator iterator() { return options.iterator(); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public String getOptionValue(char opt, String defaultValue) { return getOptionValue(String.valueOf(opt), defaultValue); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public String getOptionValue(String opt, String defaultValue) { String answer = getOptionValue(opt); return (answer != null) ? answer : defaultValue; } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public String[] getOptionValues(String opt) { Option key = resolveOption( opt ); if (options.contains(key)) { return key.getValues(); } return null; } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public List getArgList() { return args; } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public Object getOptionObject(String opt) { String res = getOptionValue(opt); Option option = resolveOption(opt); if (option == null) { return null; } Object type = option.getType(); return (res == null) ? null : TypeHandler.createValue(res, type); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public String getOptionValue(String opt) { String[] values = getOptionValues(opt); return (values == null) ? null : values[0]; } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public boolean hasOption(String opt) { return options.contains( resolveOption(opt)); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public Object getOptionObject(char opt) { return getOptionObject(String.valueOf(opt)); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public String[] getOptionValues(char opt) { return getOptionValues(String.valueOf(opt)); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public Option[] getOptions() { Collection processed = options; Option[] optionsArray = new Option[processed.size()]; return (Option[]) processed.toArray(optionsArray); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }
CommandLine { public boolean hasOption(char opt) { return hasOption(String.valueOf(opt)); } CommandLine(); boolean hasOption(String opt); boolean hasOption(char opt); Object getOptionObject(String opt); Object getOptionObject(char opt); String getOptionValue(String opt); String getOptionValue(char opt); String[] getOptionValues(String opt); String[] getOptionValues(char opt); String getOptionValue(String opt, String defaultValue); String getOptionValue(char opt, String defaultValue); String[] getArgs(); List getArgList(); Iterator iterator(); Option[] getOptions(); }

TypeHandler { public static Date createDate(String str) { Date date = null; if (date == null) { System.err.println("Unable to parse: " + str); } return date; } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static File[] createFiles(String str) { return null; } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static URL createURL(String str) { try { return new URL(str); } catch (MalformedURLException mue) { System.err.println("Unable to parse: " + str); return null; } } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static Object createObject(String str) { Class cl = null; try { cl = Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println("Unable to find: " + str); return null; } Object instance = null; try { instance = cl.newInstance(); } catch (InstantiationException cnfe) { System.err.println("InstantiationException; Unable to create: " + str); return null; } catch (IllegalAccessException cnfe) { System.err.println("IllegalAccessException; Unable to create: " + str); return null; } return instance; } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static Class createClass(String str) { try { return Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println("Unable to find: " + str); return null; } } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static Object createValue(String str, Object obj) { return createValue(str, (Class) obj); } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static Number createNumber(String str) { try { if( str != null ) { if( str.indexOf('.') != -1 ) { return Double.valueOf(str); } else { return Long.valueOf(str); } } } catch (NumberFormatException nfe) { System.err.println(nfe.getMessage()); } return null; } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static File createFile(String str) { return new File(str); } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }
TypeHandler { public static Object createValue(String str, Class clazz) { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } static Object createValue(String str, Object obj); static Object createValue(String str, Class clazz); static Object createObject(String str); static Number createNumber(String str); static Class createClass(String str); static Date createDate(String str); static URL createURL(String str); static File createFile(String str); static File[] createFiles(String str); }

Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (options.hasOption(str) && str.startsWith("-")) { iter.previous(); break; } try { opt.addValue( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException("Missing argument for option:" + opt.getKey()); } } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if ("--".equals(t)) { eatTheRest = true; } else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith("-")) { if (stopAtNonOption && !options.hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PatternBuilder { public void withPattern(final String pattern) { int sz = pattern.length(); char opt = ' '; char ch = ' '; char type = ' '; boolean required = false; for (int i = 0; i < sz; i++) { ch = pattern.charAt(i); switch (ch) { case '!' : required = true; break; case '@' : case ':' : case '%' : case '+' : case '#' : case '<' : case '>' : case '*' : case '/' : type = ch; break; default : if (opt != ' ') { createOption(type, required, opt); required = false; type = ' '; } opt = ch; } } if (opt != ' ') { createOption(type, required, opt); } } PatternBuilder(); PatternBuilder( final GroupBuilder gbuilder, final DefaultOptionBuilder obuilder, final ArgumentBuilder abuilder); Option create(); PatternBuilder reset(); void withPattern(final String pattern); }
PatternBuilder { public Option create() { final Option option; if (options.size() == 1) { option = (Option)options.iterator().next(); } else { gbuilder.reset(); for (final Iterator i = options.iterator(); i.hasNext();) { gbuilder.withOption((Option)i.next()); } option = gbuilder.create(); } reset(); return option; } PatternBuilder(); PatternBuilder( final GroupBuilder gbuilder, final DefaultOptionBuilder obuilder, final ArgumentBuilder abuilder); Option create(); PatternBuilder reset(); void withPattern(final String pattern); }
PatternBuilder { public PatternBuilder reset() { options.clear(); return this; } PatternBuilder(); PatternBuilder( final GroupBuilder gbuilder, final DefaultOptionBuilder obuilder, final ArgumentBuilder abuilder); Option create(); PatternBuilder reset(); void withPattern(final String pattern); }

HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getNewLine() { return this.defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app) .append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, new OptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getArgName() { return this.defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getWidth() { return this.defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }

Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException("Missing argument for option:" + opt.getKey()); } } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if ("--".equals(t)) { eatTheRest = true; } else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith("-")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }

Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException("Missing argument for option:" + opt.getKey()); } } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if ("--".equals(t)) { eatTheRest = true; } else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith("-")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }

HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptionComparator(Comparator comparator) { if ( comparator == null ) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getNewLine() { return this.defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public Comparator getOptionComparator() { return this.optionComparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app) .append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator() ); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getArgName() { return this.defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getWidth() { return this.defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }

ArgumentImpl extends OptionImpl implements Argument { public Set getPrefixes() { return Collections.EMPTY_SET; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, final List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final HelpLine helpLine = new HelpLineImpl(this, depth); return Collections.singletonList(helpLine); } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public boolean isRequired() { return getMinimum() > 0; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return Collections.unmodifiableSet(properties.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append("\"").append(arg).append("\""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property, final String defaultValue) { return properties.getProperty(property, defaultValue); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public String stripBoundaryQuotes(String token) { if (!token.startsWith("\"") || !token.endsWith("\"")) { return token; } token = token.substring(1, token.length() - 1); return token; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public Validator getValidator() { return this.validator; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { properties.setProperty(property, value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public int getMinimum() { return minimum; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public String getDescription() { return description; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option) throws OptionException { int argumentCount = commandLine.getUndefaultedValues(option).size(); while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted); if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } } else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; } else if (subsequentSplit) { final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); while (values.hasMoreTokens() && (argumentCount < maximum)) { ++argumentCount; final String token = values.nextToken(); commandLine.addValue(option, token); arguments.add(token); } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } } else { ++argumentCount; commandLine.addValue(option, allValues); } } } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public void defaultValues(final WriteableCommandLine commandLine, final Option option) { commandLine.setDefaultValues(option, defaultValues); } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public char getInitialSeparator() { return this.initialSeparator; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public String getPreferredName() { return name; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); } } } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); defaultValues(commandLine, this); } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public List getDefaultValues() { return this.defaultValues; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public String getConsumeRemaining() { return this.consumeRemaining; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine) throws OptionException { validate(commandLine, this); } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { return true; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ArgumentImpl extends OptionImpl implements Argument { public char getSubsequentSeparator() { return this.subsequentSeparator; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { processValues(commandLine, args, this); } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0; while (i < max) { if (i > 0) { buffer.append(' '); } if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); } buffer.append(name); ++i; if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } } if (maximum == Integer.MAX_VALUE) { buffer.append(" ..."); } while (i > 0) { --i; if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public Set getTriggers() { return Collections.EMPTY_SET; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
ArgumentImpl extends OptionImpl implements Argument { public int getMaximum() { return maximum; } ArgumentImpl(final String name, final String description, final int minimum, final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id); String getPreferredName(); void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); void process(WriteableCommandLine commandLine, ListIterator args); char getInitialSeparator(); char getSubsequentSeparator(); Set getTriggers(); String getConsumeRemaining(); List getDefaultValues(); Validator getValidator(); void validate(final WriteableCommandLine commandLine); void validate(final WriteableCommandLine commandLine, final Option option); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); String getDescription(); List helpLines(final int depth, final Set helpSettings, final Comparator comp); int getMaximum(); int getMinimum(); String stripBoundaryQuotes(String token); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); void defaultValues(final WriteableCommandLine commandLine, final Option option); static final char DEFAULT_INITIAL_SEPARATOR; static final char DEFAULT_SUBSEQUENT_SEPARATOR; static final String DEFAULT_CONSUME_REMAINING; }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, final List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); void addProperty(final String property, final String value); String getProperty(final String property, final String defaultValue); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }

GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); static final Comparator getInstance(); int compare(final Object o1, final Object o2); }
GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append(" ("); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); static final Comparator getInstance(); int compare(final Object o1, final Object o2); }
GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, "|"); } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
riteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append("\"").append(arg).append("\""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }

GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
OptionImpl implements Option { public int hashCode() { int hashCode = getId(); if (getPreferredName() != null) { hashCode = (hashCode * 37) + getPreferredName().hashCode(); } if (getDescription() != null) { hashCode = (hashCode * 37) + getDescription().hashCode(); } hashCode = (hashCode * 37) + getPrefixes().hashCode(); hashCode = (hashCode * 37) + getTriggers().hashCode(); return hashCode; } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
OptionImpl implements Option { public int getId() { return id; } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
OptionImpl implements Option { public String toString() { final StringBuffer buffer = new StringBuffer(); appendUsage(buffer, DisplaySetting.ALL, null); return buffer.toString(); } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
OptionImpl implements Option { public boolean isRequired() { return required; } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, "|"); } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
OptionImpl implements Option { public boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments) { if (arguments.hasNext()) { final String argument = (String) arguments.next(); arguments.previous(); return canProcess(commandLine, argument); } else { return false; } } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
OptionImpl implements Option { public boolean equals(final Object thatObj) { if (thatObj instanceof OptionImpl) { final OptionImpl that = (OptionImpl) thatObj; return (getId() == that.getId()) && equals(getPreferredName(), that.getPreferredName()) && equals(getDescription(), that.getDescription()) && equals(getPrefixes(), that.getPrefixes()) && equals(getTriggers(), that.getTriggers()); } else { return false; } } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
OptionImpl implements Option { public void setParent(Option parent) { this.parent = parent; } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); static final Comparator getInstance(); int compare(final Object o1, final Object o2); }
OptionImpl implements Option { public void defaults(final WriteableCommandLine commandLine) { } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
OptionImpl implements Option { public Option getParent() { return parent; } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
OptionImpl implements Option { public Option findOption(String trigger) { if (getTriggers().contains(trigger)) { return this; } else { return null; } } OptionImpl(final int id, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments); String toString(); int getId(); boolean equals(final Object thatObj); int hashCode(); Option findOption(String trigger); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); Option getParent(); void setParent(Option parent); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); static final Comparator getInstance(); int compare(final Object o1, final Object o2); }
GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append(" ("); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append("\"").append(arg).append("\""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } WriteableCommandLineImpl(final Option rootOption, final List arguments); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); static final Comparator getInstance(); int compare(final Object o1, final Object o2); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append("\"").append(arg).append("\""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); static final Comparator getInstance(); int compare(final Object o1, final Object o2); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (looksLikeOption(commandLine, arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { if (checkForOption != null) { return !checkForOption.equals(trigger); } checkForOption = trigger; try { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { if (getCurrentOption().canProcess(this, trigger) || getCurrentOption().findOption(trigger) != null) { return true; } } } return false; } finally { checkForOption = null; } } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, "|"); } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return (getParent() == null || super.isRequired()) && getMinimum() > 0; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired(); if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (looksLikeOption(commandLine, arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getCurrentOption() { return currentOption; } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = !isRequired() && (helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL_CHILD_GROUP)); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append(" ("); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setCurrentOption(Option currentOption) { this.currentOption = currentOption; } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } WriteableCommandLineImpl(final Option rootOption, final List arguments); Option getCurrentOption(); void setCurrentOption(Option currentOption); void addOption(Option option); void addValue(final Option option, final Object value); void addSwitch(final Option option, final boolean value); boolean hasOption(final Option option); Option getOption(final String trigger); List getValues(final Option option, List defaultValues); List getUndefaultedValues(Option option); Boolean getSwitch(final Option option, final Boolean defaultValue); String getProperty(final String property); void addProperty(final Option option, final String property, final String value); void addProperty(final String property, final String value); String getProperty(final Option option, final String property, final String defaultValue); Set getProperties(final Option option); Set getProperties(); boolean looksLikeOption(final String trigger); String toString(); List getOptions(); Set getOptionTriggers(); void setDefaultValues(final Option option, final List defaults); void setDefaultSwitch(final Option option, final Boolean defaultSwitch); List getNormalised(); }
elpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getNewLine() { return defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getArgName() { return defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getWidth() { return defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
elpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getNewLine() { return defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getArgName() { return defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getWidth() { return defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }

HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getNewLine() { return defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getArgName() { return defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getWidth() { return defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
ptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException("must specify longopt"); } return create(null); } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }

OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }
OptionGroup implements Serializable { public boolean isRequired() { return required; } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }
OptionGroup implements Serializable { public Collection getOptions() { return optionMap.values(); } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }
OptionGroup implements Serializable { public String getSelected() { return selected; } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }
OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }
OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }
OptionGroup implements Serializable { public String toString() { StringBuffer buff = new StringBuffer(); Iterator iter = getOptions().iterator(); buff.append("["); while (iter.hasNext()) { Option option = (Option) iter.next(); if (option.getOpt() != null) { buff.append("-"); buff.append(option.getOpt()); } else { buff.append("--"); buff.append(option.getLongOpt()); } buff.append(" "); buff.append(option.getDescription()); if (iter.hasNext()) { buff.append(", "); } } buff.append("]"); return buff.toString(); } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }
OptionGroup implements Serializable { public Collection getNames() { return optionMap.keySet(); } OptionGroup addOption(Option option); Collection getNames(); Collection getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); String toString(); }

Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if ("--".equals(t)) { eatTheRest = true; } else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith("-")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }

Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (int i = 0; i < arguments.length; i++) { handleToken(arguments[i]); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if ("--".equals(t)) { eatTheRest = true; } else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith("-")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException("A CloneNotSupportedException was thrown: " + cnse.getMessage()); } } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public String getArgName() { return defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public String getNewLine() { return defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public void setType(Object type) { this.type = type; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException("The addValue method is not intended for client use. " + "Subclasses should use the addValueForProcessing method instead. "); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getDescription() { return description; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public Object getType() { return type; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getArgName() { return argName; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public boolean isRequired() { return required; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException("must specify longopt"); } return create(null); } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append("[ option: "); buf.append(opt); if (longOpt != null) { buf.append(" ").append(longOpt); } buf.append(" "); if (hasArgs()) { buf.append("[ARG...]"); } else if (hasArg()) { buf.append(" [ARG]"); } buf.append(" :: ").append(description); if (type != null) { buf.append(" :: ").append(type); } buf.append(" ]"); return buf.toString(); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public List getValuesList() { return values; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public String getOpt() { return opt; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Object type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Object newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
HelpFormatter { public int getWidth() { return defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getArgName() { return defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getNewLine() { return defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getWidth() { return defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }

HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getDescPadding() { return defaultDescPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getArgName() { return defaultArgName; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getNewLine() { return defaultNewLine; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" "); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(" "); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedTextBlock(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException("cmdLineSyntax not provided"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public int getWidth() { return defaultWidth; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }
HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } void setWidth(int width); int getWidth(); void setLeftPadding(int padding); int getLeftPadding(); void setDescPadding(int padding); int getDescPadding(); void setSyntaxPrefix(String prefix); String getSyntaxPrefix(); void setNewLine(String newline); String getNewLine(); void setOptPrefix(String prefix); String getOptPrefix(); void setLongOptPrefix(String prefix); String getLongOptPrefix(); void setLongOptSeparator(String longOptSeparator); String getLongOptSeparator(); void setArgName(String name); String getArgName(); Comparator getOptionComparator(); void setOptionComparator(Comparator comparator); void printHelp(String cmdLineSyntax, Options options); void printHelp(String cmdLineSyntax, Options options, boolean autoUsage); void printHelp(String cmdLineSyntax, String header, Options options, String footer); void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer); void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer); void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage); void printUsage(PrintWriter pw, int width, String app, Options options); void printUsage(PrintWriter pw, int width, String cmdLineSyntax); void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad); void printWrapped(PrintWriter pw, int width, String text); void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text); static final int DEFAULT_WIDTH; static final int DEFAULT_LEFT_PAD; static final int DEFAULT_DESC_PAD; static final String DEFAULT_SYNTAX_PREFIX; static final String DEFAULT_OPT_PREFIX; static final String DEFAULT_LONG_OPT_PREFIX; static final String DEFAULT_LONG_OPT_SEPARATOR; static final String DEFAULT_ARG_NAME; public int defaultWidth; public int defaultLeftPad; public int defaultDescPad; public String defaultSyntaxPrefix; public String defaultNewLine; public String defaultOptPrefix; public String defaultLongOptPrefix; public String defaultArgName; }

Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getDescription() { return description; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean isRequired() { return required; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder withType(Class newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append("[ option: "); buf.append(opt); if (longOpt != null) { buf.append(" ").append(longOpt); } buf.append(" "); if (hasArgs()) { buf.append("[ARG...]"); } else if (hasArg()) { buf.append(" [ARG]"); } buf.append(" :: ").append(description); if (type != null) { buf.append(" :: ").append(type); } buf.append(" ]"); return buf.toString(); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException("must specify longopt"); } return create(null); } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException("The addValue method is not intended for client use. " + "Subclasses should use the addValueForProcessing method instead. "); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public List getValuesList() { return values; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public Object getType() { return type; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setType(Class type) { this.type = type; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException("A CloneNotSupportedException was thrown: " + cnse.getMessage()); } } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); static OptionBuilder withLongOpt(String newLongopt); static OptionBuilder hasArg(); static OptionBuilder hasArg(boolean hasArg); static OptionBuilder withArgName(String name); static OptionBuilder isRequired(); static OptionBuilder withValueSeparator(char sep); static OptionBuilder withValueSeparator(); static OptionBuilder isRequired(boolean newRequired); static OptionBuilder hasArgs(); static OptionBuilder hasArgs(int num); static OptionBuilder hasOptionalArg(); static OptionBuilder hasOptionalArgs(); static OptionBuilder hasOptionalArgs(int numArgs); static OptionBuilder withType(Class newType); static OptionBuilder withDescription(String newDescription); static Option create(char opt); static Option create(); static Option create(String opt); }
Option implements Cloneable, Serializable { public String getArgName() { return argName; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public String getOpt() { return opt; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }
Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } Option(String opt, String description); Option(String opt, boolean hasArg, String description); Option(String opt, String longOpt, boolean hasArg, String description); int getId(); String getOpt(); Object getType(); void setType(Class type); String getLongOpt(); void setLongOpt(String longOpt); void setOptionalArg(boolean optionalArg); boolean hasOptionalArg(); boolean hasLongOpt(); boolean hasArg(); String getDescription(); void setDescription(String description); boolean isRequired(); void setRequired(boolean required); void setArgName(String argName); String getArgName(); boolean hasArgName(); boolean hasArgs(); void setArgs(int num); void setValueSeparator(char sep); char getValueSeparator(); boolean hasValueSeparator(); int getArgs(); String getValue(); String getValue(int index); String getValue(String defaultValue); String[] getValues(); List getValuesList(); String toString(); boolean equals(Object o); int hashCode(); Object clone(); boolean addValue(String value); static final int UNINITIALIZED; static final int UNLIMITED_VALUES; }

Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if(longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append("[ Options: [ short "); buf.append(shortOpts.toString()); buf.append(" ] [ long "); buf.append(longOpts); buf.append(" ]"); return buf.toString(); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }

Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append("[ Options: [ short "); buf.append(shortOpts.toString()); buf.append(" ] [ long "); buf.append(longOpts); buf.append(" ]"); return buf.toString(); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
OptionGroup implements Serializable { public boolean isRequired() { return required; } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if (longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
OptionGroup implements Serializable { public Collection<Option> getOptions() { return optionMap.values(); } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
OptionGroup implements Serializable { public String getSelected() { return selected; } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
OptionGroup implements Serializable { @Override public String toString() { StringBuilder buff = new StringBuilder(); Iterator<Option> iter = getOptions().iterator(); buff.append("["); while (iter.hasNext()) { Option option = iter.next(); if (option.getOpt() != null) { buff.append("-"); buff.append(option.getOpt()); } else { buff.append("--"); buff.append(option.getLongOpt()); } if (option.getDescription() != null) { buff.append(" "); buff.append(option.getDescription()); } if (iter.hasNext()) { buff.append(", "); } } buff.append("]"); return buff.toString(); } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }
OptionGroup implements Serializable { public Collection<String> getNames() { return optionMap.keySet(); } OptionGroup addOption(Option option); Collection<String> getNames(); Collection<Option> getOptions(); void setSelected(Option option); String getSelected(); void setRequired(boolean required); boolean isRequired(); @Override String toString(); }
Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } Options addOptionGroup(OptionGroup group); Options addOption(String opt, String description); Options addOption(String opt, boolean hasArg, String description); Options addOption(String opt, String longOpt, boolean hasArg, String description); Options addOption(Option opt); Collection<Option> getOptions(); List getRequiredOptions(); Option getOption(String opt); List<String> getMatchingOptions(String opt); boolean hasOption(String opt); boolean hasLongOption(String opt); boolean hasShortOption(String opt); OptionGroup getOptionGroup(Option opt); @Override String toString(); }

DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }

DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }
DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }

TypeHandler { public static Date createDate(final String str) { throw new UnsupportedOperationException("Not yet implemented"); } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static File[] createFiles(final String str) { throw new UnsupportedOperationException("Not yet implemented"); } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static FileInputStream openFile(String str) throws ParseException { try { return new FileInputStream(str); } catch (FileNotFoundException e) { throw new ParseException("Unable to find file: " + str); } } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static URL createURL(final String str) throws ParseException { try { return new URL(str); } catch (final MalformedURLException e) { throw new ParseException("Unable to parse the URL: " + str); } } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static Object createObject(final String classname) throws ParseException { Class<?> cl; try { cl = Class.forName(classname); } catch (final ClassNotFoundException cnfe) { throw new ParseException("Unable to find the class: " + classname); } try { return cl.newInstance(); } catch (final Exception e) { throw new ParseException(e.getClass().getName() + "; Unable to create an instance of: " + classname); } } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static Class<?> createClass(final String classname) throws ParseException { try { return Class.forName(classname); } catch (final ClassNotFoundException e) { throw new ParseException("Unable to find the class: " + classname); } } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException { return createValue(str, (Class<?>) obj); } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static Number createNumber(final String str) throws ParseException { try { if (str.indexOf('.') != -1) { return Double.valueOf(str); } return Long.valueOf(str); } catch (final NumberFormatException e) { throw new ParseException(e.getMessage()); } } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static File createFile(final String str) { return new File(str); } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }
TypeHandler { public static Object createValue(final String str, final Class<?> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } static Object createValue(final String str, final Object obj); static Object createValue(final String str, final Class<?> clazz); static Object createObject(final String classname); static Number createNumber(final String str); static Class<?> createClass(final String classname); static Date createDate(final String str); static URL createURL(final String str); static File createFile(final String str); static FileInputStream openFile(String str); static File[] createFiles(final String str); }